_________________________________________________________________________________________________									Model
_________________________________________________________________________________________________

A model is the single , definative source of information about your data 
it contains the essential fields and behaqviors of the data you're storing
generally, each model maps to  a single databse table


_________________________________________________________________________________________________
						Model Class
_________________________________________________________________________________________________

Model class is a class which will represent a table in database

each model is a python class that subclasses django.db.models.Model

each attribute of the model represents a database field.

with all of this django gives you an  automatically generated database access API Django provides built-in database by default that is sqlite database

we can use other database like mysql , oracle sql etc

_________________________________________________________________________________________________
				Create Our Own Model Class
_________________________________________________________________________________________________

models.py file which is inside application folder is require to create our own model class

our own model class will inherit python's model class


syntax:
class ClassName(models.Model):
		field_name = models.FieldType(arg, options)


example:

models.py

class Student(models.Model):
	 stuid=models.IntegerField(max_length=70)
	 stuname=models.CharField(max_length=70)
	 stumail=models.EmailField(max_length=70)
	 stupass=models.CharField(max_length=70)

* lenght is required in the CharField Type




--> this class will create a table with columns and their datatypes
--> table name will be ApplicationName_ClassName, in this case it will be enroll_student
--> Field name will become table's Column Name , in this case it will be stuid, stuname, stuemail, stupass with their datatype
--> As we have not mentioned primary key in any of these columns so it will automatically createa new column named 'id' Data Type Integer with primary key and auto increment





--------------------------------

models.py

class Student(models.Model):
	 stuid=models.IntegerField(max_length=70)
	 stuname=models.CharField(max_length=70)
	 stumail=models.EmailField(max_length=70)
	 stupass=models.CharField(max_length=70)



CREATE TABLE "enroll_student"(
	"id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
	"stuid" integer NOT NULL,
	"stuname" varchar(70) NOT NULL,
	"stuemail" varchar(70) NOT NULL,
	"stupass" varchar(70) NOT NULL,
);


_____________________________________________________________________________________________
								Rules
______________________________________________________________________________________________

* Field Name instantiated as class attribute and represents a particular table's column name

* Field Name is also known as Data Type

* A field name cannot be python reserved word

* Field Name cannot contain more than one underscore in a row, due to the way  django's query lookup syntax works

* field name cannot end with an underscore


_____________________________________________________________________________________________
						How to use Models 
_______________________________________________________________________________________________

once you have defined your models , you need to tell django you're going to use those models

* open setting.py file
* write application name which contains models.py file in the INSTALLED_APPS =[]
* open terminal
* run python manage.py makemigrations
* run python manage.py migrate


________________________________________________________________________________________________
						Migrations
________________________________________________________________________________________________

Migrations are django's way of propagating changes you make to your models ( adding a field, deleting a model , etc) into your database schema 

** makemigrations -> this is responsible for creating new migrations based on the changes you have made to your models.

** migrate -> responsible for applying and unapplying migrations

* sqlmigrate -> displays the sql statements for a migration

* showmigrations -> this lists a project's migrations and their status


____________________________________________________________________________________________
					makemigrations and migrate
____________________________________________________________________________________________

* makemigrations -> is used to convert model class into sql statements. this will also create a file which will contain sql statements. this file is located in the application's migrations folder

syntax:
	python manage.py makemigrations


* migrate -> is used to execute sql statements generated by makemigrations. this command will execute all Application's ( including built-in applications) SQL statements if availabe. after execution of sql statements table will be created

syntax:
	python manage.py migrate

note:
if you make any change in your own model class ,ypur are required to run makemigrations and migrate command only then you will get  those changes in your application.

_______________________________________________________________________________________________
							Display SQL statement
_______________________________________________________________________________________________

we can retrive SQL statement by using :
syntax:
python manage.py sqlmigrate application_name dbfile_name

example:
python manage.py sqlmigrate enroll 0001

______________________________________________________________________________________________


models.py

class Student(models.Model):
	 stuid=models.IntegerField(max_length=70)
	 stuname=models.CharField(max_length=70)
	 stumail=models.EmailField(max_length=70)
	 stupass=models.CharField(max_length=70)


> python manage.py makemigrations

CREATE TABLE "enroll_student"(
	"id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
	"stuid" integer NOT NULL,
	"stuname" varchar(70) NOT NULL,
	"stuemail" varchar(70) NOT NULL,
	"stupass" varchar(70) NOT NULL,
);


enroll/migrations/0001_initial.py
??



______________________________________________________________________________________________
							steps
______________________________________________________________________________________________

* create project : django-admin startproject projectname

* create application: python manage.py startapp appname

* add/install applications to django project using settings.py INSTALLED_APP

* create templates folder inside application

* create static folder inside application

* open models.py file which is inside application

* write model class

* run python manage.py makemigrations command

* database table will create automatically

* write views function inside views.py file

* define url for view function of application using urls.py

* write templates file code

* write static file code



________________________________________________________________________________________________
									Built-in Field  ssssasasssasssassssssssssssssqwsssssssssssssssssaaaaaaasssssswwwwwwwwwwwwwwwwwwwwwwwwwwwwwqqqqq options
________________________________________________________________________________________________













_______________________________________________________________________________________________
									Built-in Field type
_____________________________________________________________________________________________


